var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = JuliaPkg","category":"page"},{"location":"#JuliaPkg","page":"Home","title":"JuliaPkg","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"JuliaPkg is an Actors protocol. It abstracts the common client-server interaction. Developers are only required to implement the callbacks and functionality they are interested in.","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Understanding JuliaPkg","category":"page"},{"location":"","page":"Home","title":"Home","text":"JuliaPkg is part of JuliaActors","category":"page"},{"location":"#Author(s)","page":"Home","title":"Author(s)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Chris du Plessis","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"MIT","category":"page"},{"location":"genserver/#Understanding-GenServers","page":"Understanding GenServers","title":"Understanding GenServers","text":"","category":"section"},{"location":"genserver/","page":"Understanding GenServers","title":"Understanding GenServers","text":"GenServers uses a powerful technique invented around the creation of Erlang/OTP:","category":"page"},{"location":"genserver/","page":"Understanding GenServers","title":"Understanding GenServers","text":"Abstracting out concurrency is one of the most powerful means available for structuring large software systems. ...The reason for this is that concurrent code cannot be written in a side-effect free manner, and as such, is more difficult to understand and analyze than purely sequential side-effect free code. In a system involving large numbers of processes, issues of message passing ordering and potential dead- or live-lock problems can make concurrent systems very difficult to understand and program. The most common abstraction used by applications ... is the client–server abstraction. [1]","category":"page"},{"location":"genserver/#Generic-Server-code","page":"Understanding GenServers","title":"Generic Server code","text":"","category":"section"},{"location":"genserver/","page":"Understanding GenServers","title":"Understanding GenServers","text":"GenServers provides generic and concurrent server code for","category":"page"},{"location":"genserver/","page":"Understanding GenServers","title":"Understanding GenServers","text":"spawning a :genserver actor,\nsetting and maintaining its state,\nreacting to messages and\nresponding to the caller","category":"page"},{"location":"genserver/#Implementation-Code","page":"Understanding GenServers","title":"Implementation Code","text":"","category":"section"},{"location":"genserver/","page":"Understanding GenServers","title":"Understanding GenServers","text":"A developer then writes an implementation module with purely sequential code consisting of interface and callback functions determining ","category":"page"},{"location":"genserver/","page":"Understanding GenServers","title":"Understanding GenServers","text":"initial server state,\nhandling of messages and\nwhat to respond to them.","category":"page"},{"location":"genserver/","page":"Understanding GenServers","title":"Understanding GenServers","text":"With double she plugs this module into the generic server. The :genserver actor then executes the provided callback functions on startup or on messages.","category":"page"},{"location":"genserver/","page":"Understanding GenServers","title":"Understanding GenServers","text":"Two types of requests can be issued to a server process: call and cast:","category":"page"},{"location":"genserver/","page":"Understanding GenServers","title":"Understanding GenServers","text":"A Cast is a fire-and-forget type of request — a caller sends a message and immediately moves on to do something else.\nA Call is a synchronous send-and-respond request — a caller sends a message and waits until the response arrives, the timeout occurs, or the server crashes.","category":"page"},{"location":"genserver/","page":"Understanding GenServers","title":"Understanding GenServers","text":"This keeps the concurrent code within the Actors infrastructure and allows an application developer to focus on functionality while getting highly thread-safe, distributed and fault-tolerant code.","category":"page"},{"location":"genserver/","page":"Understanding GenServers","title":"Understanding GenServers","text":"[1]: Joe Armstrong: Making reliable distributed systems in the presence of software errors.- p. 87","category":"page"}]
}
